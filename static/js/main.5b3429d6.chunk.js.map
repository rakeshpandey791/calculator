{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","calculatorKeys","result","operators","handleCaculatorKey","event","clickedCmd","target","dataset","cmd","key","setState","handleOperators","newResult","length","processOperator","parseInt","mode","push","this","label","action","gridClass","operator","val1","val2","className","onClick","map","data-cmd","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b3429d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    calculatorKeys : [],\n    result: '',\n    operators: []\n  }\n\n  constructor(){\n    super();\n  }\n\n  componentDidMount(){\n    const calculatorKeys = [\n      {label: 'AC', action: 'AC', gridClass:'ac'}, {label: '+/-', action: 'AC', gridClass:'ac'},\n       {label: '%', action: '%', gridClass:'ac'}, {label: '/', action: '/', gridClass:'action'},\n        {label: '7', action: '7', gridClass:'number'}, {label: '8', action: '8', gridClass:'number'}, \n      {label: '9', action: '9', gridClass:'number'}, {label: 'X', action: '*', gridClass:'action'},\n       {label: '4', action: '4', gridClass:'number'}, {label: '5', action: '5', gridClass:'number'},\n        {label: '6', action: '6', gridClass:'number'}, {label: '-', action: '-', gridClass:'action'},\n      {label: '1', action: '1', gridClass:'number'}, {label: '2', action: '2', gridClass:'number'},\n       {label: '3', action: '3', gridClass:'number'}, {label: '+', action: '+', gridClass:'action'},\n        {label: '0', action: '0', gridClass:'number-0'}, {label: '.', action: '.', gridClass:'number'},\n      {label: '=', action: '=', gridClass:'action'}\n    ];\n    this.setState({calculatorKeys: calculatorKeys});\n  }\n\n  handleCaculatorKey = (event) => {\n    const clickedCmd = event.target.dataset.cmd;\n    let key = this.state.result;\n    switch(clickedCmd) {\n      case '0': \n          key += clickedCmd;\n          this.setState({result: key});\n        return;\n      case '1': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '2': \n      key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '3': \n      key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '4': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '5': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '6': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '7': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '8': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case '9': \n        key += clickedCmd;\n        this.setState({result: key});\n        return;\n      case 'AC': \n        this.setState({result: '', operators: []});\n        return;\n      case '+':\n        this.handleOperators(clickedCmd);         \n        return;\n      case '-': \n        this.handleOperators(clickedCmd); \n        return;\n      case '*': \n        this.handleOperators(clickedCmd); \n        return;\n      case '/': \n        this.handleOperators(clickedCmd); \n        return;\n      case '=': \n        let newResult = 0;\n        if(this.state.operators.length > 0) {\n          newResult = this.processOperator(this.state.operators[1], parseInt(this.state.operators[0]), parseInt(this.state.result));\n        } else {\n          newResult = this.state.result\n        }\n        this.setState({result: newResult, operators: [newResult, this.state.operators[1]]}); \n        return;\n      case '%': \n        if(this.state.result) {\n          const mode = this.processOperator('%', parseInt(this.state.result), 100);\n          this.setState({result: mode, operators: []}); \n        }\n        return;\n        \n    }\n  }\n\n  handleOperators = (clickedCmd) => {\n    const operators = this.state.operators;\n    if(operators.length < 1){\n      operators.push(this.state.result);\n      operators.push(clickedCmd);\n      this.setState({result: '', operators: operators});\n    } else {\n      const newResult = this.processOperator(operators[1], parseInt(operators[0]), parseInt(this.state.result));\n      this.setState({result: ''});\n      operators[0] = newResult;\n      operators[1] = clickedCmd;\n      this.setState({operators: operators});\n    }\n  }\n\n  processOperator(operator, val1, val2) {\n    switch(operator) {\n      case '+':\n        return val1 + val2;\n      case '-':\n        return val1 - val2;\n      case '*':\n        return val1 * val2;\n      case '/':\n        return val1 / val2;\n      case '%':\n        return val1 / val2;\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"calculator-container\" onClick={this.handleCaculatorKey}>\n      <div className=\"result\">{this.state.result}</div>\n        {\n          this.state.calculatorKeys.map((key)=> (\n            <div className={key.gridClass} \n            data-cmd={key.action} key={key.label}>{key.label}</div>\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}